{"version":3,"file":"static/js/530.43439332.chunk.js","mappings":"sSAAMA,EAAW,+BACXC,EAAM,4C,SAGGC,EAAW,GAAXA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,WAA0BC,GAA1B,uFACyBC,MAAMD,GAD/B,YACQE,EADR,QAEkBC,GAFlB,gCAGYD,EAASE,OAHrB,+CAIMC,QAAQC,OAAO,IAAIC,MAAM,kBAJ/B,0GAOO,SAASC,IACd,OAAOT,EAAW,GAAD,OAAIF,EAAJ,8BAAkCC,IAG9C,SAASW,EAAaC,GAC3B,OAAOX,EAAW,GAAD,OAAIF,EAAJ,wBAA4BC,EAA5B,kBAAyCY,IAGrD,SAASC,EAAmBC,GACjC,OAAOb,EAAW,GAAD,OAAIF,EAAJ,kBAAsBe,GAAtB,OAAgCd,IAG5C,SAASe,EAAkBD,GAChC,OAAOb,EAAW,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,mBAAwCd,IAGpD,SAASgB,EAAoBF,GAClC,OAAOb,EAAW,GAAD,OAAIF,EAAJ,kBAAsBe,EAAtB,mBAAwCd,M,kHCxB5C,SAASiB,IACtB,OAAwBC,EAAAA,EAAAA,UAAS,MAAjC,eAAOC,EAAP,KAAaC,EAAb,KACQN,GAAYO,EAAAA,EAAAA,MAAZP,QAQR,OANAQ,EAAAA,EAAAA,YAAU,YACRP,EAAAA,EAAAA,IAAkBD,GACfS,MAAK,SAAAC,GAAM,OAAIJ,EAAQI,EAAOL,SAC9BM,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,QAC7B,CAACZ,KAGF,iCACE,kCAEA,wBACGK,IACkB,IAAhBA,EAAKU,QACJ,mFAEAV,EAAKW,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC/B,OACE,2BACE,gBACEC,IAAG,6CAAwCD,GAC3CE,MAAM,MACNC,IAAKL,KAEP,wBAAKC,KACL,uBAAID,MAPGD","sources":["api/fetchFilms.js","views/Cast/Cast.jsx"],"sourcesContent":["const BASE_URL = 'https://api.themoviedb.org/3';\nconst KEY = '?api_key=2ddded2d287329b6efbf335a6f8f3bd4';\n// 'https://api.themoviedb.org/3/movie/550?api_key=2ddded2d287329b6efbf335a6f8f3bd4';\n\nasync function fetchFilms(url) {\n  const response = await fetch(url);\n  return response.ok\n    ? await response.json()\n    : Promise.reject(new Error('404 Not found'));\n}\n\nexport function fetchTrending() {\n  return fetchFilms(`${BASE_URL}/trending/movie/day${KEY}`);\n}\n\nexport function searchMovies(movie) {\n  return fetchFilms(`${BASE_URL}/search/movie${KEY}&query=${movie}`);\n}\n\nexport function getOneMovieDetails(movieId) {\n  return fetchFilms(`${BASE_URL}/movie/${movieId}${KEY}`);\n}\n\nexport function getOneMovieActors(movieId) {\n  return fetchFilms(`${BASE_URL}/movie/${movieId}/credits${KEY}`);\n}\n\nexport function getOneMovieReviewes(movieId) {\n  return fetchFilms(`${BASE_URL}/movie/${movieId}/reviews${KEY}`);\n}\n","import { useEffect, useState } from 'react';\nimport { getOneMovieActors } from '../../api/fetchFilms';\nimport { useParams } from 'react-router-dom';\n\nexport default function Cast() {\n  const [cast, setCast] = useState(null);\n  const { movieId } = useParams();\n\n  useEffect(() => {\n    getOneMovieActors(movieId)\n      .then(actors => setCast(actors.cast))\n      .catch(error => console.log(error));\n  }, [movieId]);\n\n  return (\n    <>\n      <h3>Cast</h3>\n\n      <ul>\n        {cast &&\n          (cast.length === 0 ? (\n            <h4>We have no information about the cast now. Come later!</h4>\n          ) : (\n            cast.map(({ id, name, character, profile_path }) => {\n              return (\n                <li key={id}>\n                  <img\n                    src={`https://image.tmdb.org/t/p/original${profile_path}`}\n                    width=\"100\"\n                    alt={name}\n                  />\n                  <h4>{character}</h4>\n                  <p>{name}</p>\n                </li>\n              );\n            })\n          ))}\n      </ul>\n    </>\n  );\n}\n"],"names":["BASE_URL","KEY","fetchFilms","url","fetch","response","ok","json","Promise","reject","Error","fetchTrending","searchMovies","movie","getOneMovieDetails","movieId","getOneMovieActors","getOneMovieReviewes","Cast","useState","cast","setCast","useParams","useEffect","then","actors","catch","error","console","log","length","map","id","name","character","profile_path","src","width","alt"],"sourceRoot":""}